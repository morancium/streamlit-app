[{"title": "Grid Custom CSS", "body": "Grid Custom CSSFrom 4.4 version of Vitara Charts, users can customize grid chart by formatting the styles of rows and columns. Lets see those formattings below one by one.1. Row Styles:1.1 Styling all the rowsEach row in the grid can be commonly styled using the below class..vitara-row{    color:blue;     background-color:lightblue !important;    font-family:calibri;    font-size:14px; }Below is the screenshot with the above custom styles applied.1.2 Styling Even/Odd rowsAll the even rows in the grid can be styled using the below class.vitara-row.vitara-grid-row-even{    color:white;    background-color: lightseagreen;    font-size:12px;    font-family:verdana;}All the odd rows in the grid can be styled using the below class.vitara-row.vitara-grid-row-odd{    color:wheat;    background-color:teal;    font-family:helvetica;    font-size:12px;}Below is the screenshot which shows the applied styles for even and odd rows.2. Grouped Row Styles2.1 Styling all the grouped rowsTo style all the grouped rows in the chart, use the below class..vitara-row.vitara-grid-row-group{color:indigo !important;}Below screenshot shows the above styles applied for the grouped rows.2.2 Styling Even/Odd grouped rowsAll the even grouped rows in the grid can be styled using the below class.vitara-row.vitara-grid-row-even.vitara-grid-row-group{    color:orange;    background-color:purple;    font-family:lucida console;    font-size:12px;    font-weight:bold;}All the odd grouped rows in the grid can be styled using the below class.vitara-row.vitara-grid-row-odd.vitara-grid-row-group{    color:purple;    background-color:orange;    font-family:lucida console;    font-size:12px; }Below is the screenshot that shows the styles applied on odd and even grouped rows.3.Styling the Headers3.1 Styling the normal headerThe headers in the grid can be styled using the below class..vitara-header.vitara-grid-header-cell {color:brown;font-size:15px;font-family:calibri;font-weight: bold;background-color:pink;}Below screenshot shows the above styles applied on the header cell in the normal grid.3.2 Styling the grouped headerGrouped header cells are formed by either pivoting or column grouping. These headers can be styled by using the below class. These styles will not be applied to the header cell in a normal(neither pivoted nor column grouped) grid..vitara-header.vitara-grid-grouped-header-cell{color:blue;background-color:silver;}Below screenshot shows the above styles applied on the grouped header cell.4. Styling the Subtotals4.1 Styling the Subtotal headersSubtotal headers can be styled using the below class..vitara-grid-subtotals-header.vitara-grid-subtotals-cell{    color:yellow;    background-color:orange;}Below screenshot shows the above styles applied for the subtotal header.4.2 Styling the Subtotal valuesSubtotal values can be styled using the below class..vitara-grid-subtotals-value.vitara-grid-subtotals-cell{    color:yellow;    background-color:orange;}Below screenshot shows the above styles applied for the subtotal values.5. Column StylesEvery even column can be styled using the below class..vitara-grid-column:nth-child(2n){color:#ff890f;background-color:#0ff888; font-weight:bold;font-family:verdana;font-size:11px;}Every odd column can be styled using the below class..vitara-grid-column:nth-child(2n+1){color:#fff;background-color:#ff8800;font-size:11px;font-family:verdana;}Below is the screenshot that shows the applied styles for odd and even columns.The styles applied for columns will also be reflected for Grand totals, to overcome those we will style grand totals using the below classes.vitara-grand-totals-header.vitara-grand-totals-cell{color:red;background-color:black;}.vitara-grand-totals-value.vitara-grand-totals-cell{color:red;background-color:black;font-weight:unset;}See the screenshot below which shows the grand total styles that overcomes the column styles applied on it6. Grand Totals6.1 Grand totals rowThe entire grand totals row can be styled using the below class.vitara-grand-totals.vitara-grand-totals{    color:white;    background-color:brown !important;    font-family:lucida console;    font-weight:bold;}See the below screenshot with the above properties applied.6.2 Grand totals titleTo style only the grand totals title, use the below class.vitara-grand-totals-header.vitara-grand-totals-cell{    color:yellow;    background-color:seagreen;    font-family:helvetica;    font-weight:bold;    font-style:italic;}See the screenshot with the above properties applied only to the grand totals title.6.3 Grand totals valuesTo style only the grand totals' values, use the below class..vitara-grand-totals-value.vitara-grand-totals-cell{    color:lightgreen;    background-color:teal;    font-family:verdana;    font-style:italic;}See the below screenshot with the above properties applied only to the grand totals valuesCustom themesFrom 4.5 version of Vitara Charts, users can create their own themes and use those themes in Grid chartTwo files in the VitaraCharts/custom/ folder are required to create custom themes. They are global.txt and customStyles.css.The CSS class names and properties will be added to the customStyles.ccs file. Consult the sections 1 through 6 above to learn more about CSS classes and properties.Themes will be listed in the global.txt file in order to make them visible in the property editor.Step 1:For example, if we have to create a theme named 'theme1' which styles even and odd rows of the grid chart. Then in customStyles.css file, the format of CSS code should be as.Theme1 .vitara-row.vitara-grid-row-even{    color:white;    background-color: lightseagreen;    font-size:12px;    font-family:verdana;}.Theme1 .vitara-row.vitara-grid-row-odd{    color:wheat;    background-color:teal;    font-family:helvetica;    font-size:12px;}The name of the theme is Theme1 in the code above.And, as you may have noticed, the theme name 'Theme1' is repeated, that is, the name appears in both the first and second pieces of code.According to the feature, the theme name should be repeated as many times as there are code blocks in order for certain styles to be applied solely to a single theme.Let's make another theme that styles all of the rows and header cells. Also, the format should be as follows:.Theme2 .vitara-row{    color:blue;     background-color:lightblue !important;    font-family:calibri;    font-size:14px; }.Theme2 .vitara-header.vitara-grid-header-cell {color:brown;font-size:15px;font-family:calibri;font-weight: bold;background-color:pink;}And in the above blocks of CSS code also, the theme name Theme2 is repeated.Step 2:Now, add those theme names to the global.txt file in the way shown below. Please keep in mind that theme names are case sensitive. As a result, the names should be the same as they are in customStyles.css.gridThemes.themes=Theme1,Theme2The themes will then be listed in the grid chart. This can be verified in two ways: one using the property editor and the other through the context menu [2020]. Please see the screenshots below.Property EditorContext menuStep 3:Now, apply Theme1 from either the property editor or context menu. Then the charts like below screenshot.And apply Theme2. Then the chart looks like the screenshot below.Base ThemesThe base theme is the one to which custom theme styles are applied. A custom theme is always applied to a base theme.For example, we have a grid chart with the subject 'Blue'. And now, when we apply a custom theme, the styles are applied to a white-based theme rather than a blue-based theme. This is due to the fact that all custom themes are by default based on the white theme.The grid chart saved with the 'Blue' theme is shown below in a screenshot.After applying the custom theme 'theme1', the base theme gets changed to white. See the colors of headers and group dropzones in the below screenshot.Changing the base theme:The basic theme for custom themes can also be changed. The starting point might be an in-built theme or any customised theme. For example, if we want the default theme to be 'Dark,' add the following line to the global.txt file.gridThemes.baseThemes=DarkApply the custom theme 'Theme1' now, and the styles will be applied to the 'Dark' base theme. Compare the screenshot below to the previous screenshot.Setting default themeWe can now set the Grid chart's default theme as of Vitara Charts version 4.5. A built-in theme or a custom theme can be used as the default theme. For instance, if we want to make 'Theme2' a custom theme as the default theme, we would add the following to the global.txt file.gridThemes.defaultTheme=Theme2", "url": "https://docs.vitaracharts.com/customization/GridCustomCSS.html"}, {"title": "Introduction", "body": "Please note that several of these features (linked to on the left) require a specific version (or higher) of VitaraCharts. These requirements are noted on each the page. Please pay attention to this prior to trying out these features", "url": "https://docs.vitaracharts.com/customization/about.html"}, {"title": "Custom CSS", "body": "These features are supported in the release 4.2 (or newer)Custom CSS in Vitara ChartsIf you use custom CSS styles in Vitara Charts, no presentational characteristics (such as fill, stroke, font styles, and so on) are applied to the chart SVG. Instead, CSS is used to apply the design.Tocustomizeyour styles, edit the customStyles.css file and add your own CSS rules.The customStyles.css file is located at,tomcat/webapps/MicroStrategy/plugins/VitaraCharts/customThe following is an overview of the CSS rules which are internally set on the VitaraCharts.CSS Rules.vitara-chart-backgroundThe chart area background. Use this to set the chart area background fills..vitara-plot-backgroundThe plot area background. Use this to set the plot area background fills..vitara-category-axisClass for the category axis. Use this to set the category axis labels text style..vitara-value-axisClass for the value axis. Use this to set the value axis labels' text style..vitara-axis-titleThe title of the axis. Set the axis title text style with this. To set the title of a given axis, use this class in conjunction with the category or value axis. Text characteristics such as font-family, font-style,color, text-decoration, text-transform, and letter-spacing can be changed..vitara-axis-lineThe axis line is a straight line. Set the width and color of the axis line with this. To set the axis line attributes of a certain axis, use this class in conjunction with the category or value axis..vitara-line-displayThe line series. Use this to set the default line style in any line series. Use this class in conjunction with the chart's class name to specifically set the line properties of that particular chart. Line properties like stroke-dasharray, stroke and stroke-width can be set..vitara-grid-lineThe grid line. Use this to set the grid line properties. Line properties like stroke-dasharray, stroke and stroke-width can be set..vitara-legend-textThe legend item text. Use this to set the legend item text style. Can change text properties like font-family, font-style, color, text-decoration, text-transform, letter-spacing..vitara-markerCan change the fills and strokes and sizes of markers on VitaraCharts selected from the Marker tab in the property editor..vitara-datalabelThe datalabel. Use this to change the text style of datalabels. Can change text properties like font-family, font-style, color, text-decoration, text-transform, letter-spacing..vitara-pointThe default class for any data element on the chart.For example, in bar chart a bar is a data element and in a bubble chart a bubble is a data element.Use this to change the text style of datalabels. Can change text properties like font-family, font-style, color, text-decoration, text-transform, letter-spacing.### CSS Class Names of charts| Chart Name      | Class Name          || :--------------- | :------------------- || Vitara Bar Chart | .VitaraHCBarChart  || Vitara Stacked Bar Chart | .VitaraHCStackedBarChart || Vitara Column Chart | .VitaraHCColumnChart || Vitara Stacked Column Chart | .VitaraHCStackedColumnChart || Vitara Pie Chart | .VitaraHCPieChart || Vitara KPI Ring Chart | .VitaraHCKPIRingChart || Vitara Line Chart | .VitaraHCLineChart || Vitara Area Chart | .VitaraHCAreaChart || Vitara Bubble Chart | .VitaraHCBubbleChart || Vitara Tornado Chart | .VitaraHCTornadoChart || Vitara Sparkline Chart | .VitaraHCSparklineChart || Vitara Heatmap Chart | .VitaraHCHeatmapChart || Vitara Funnel Chart | .VitaraHCFunnelChart || Vitara Column Range Chart | .VitaraHCColumnRangeChart || Vitara Bullet Chart | .VitaraHCBulletChart || Vitara Waterfall Chart | .VitaraHCWaterfallChart || Vitara KPI Animation Chart | .VitaraKPIAnimationChart || Vitara Calendar Heatmap | .VitaraD3CalHeatMapChart || Vitara Simple KPI Chart | .VitaraSimpleKPIChart || Vitara Mekko Chart | .VitaraMekkoChart || Vitara Word Cloud | .VitaraHCWordCloud || Vitara Waffle Chart | .VitaraD3WaffleChart || Vitara Histogram Chart | .VitaraHistogramChart || Vitara Dumbbell Chart | .VitaraHCDumbbellChart || Vitara Slope Chart | .VitaraHCSlopeChart || Vitara Circle Packing Chart | .VitaraD3CirclePackingChart || Vitara Angular Gauge Chart | .VitaraHCAngularGaugeChart || Vitara Sankey Chart | .VitaraHCSankeyChart |View sample implementations", "url": "https://docs.vitaracharts.com/customization/customCSS.html"}, {"title": "Custom CSS Samples", "body": "These features are supported in the release 4.2 (or newer)Custom CSS SamplesChart Area BackgroundApplied chart area background color to be rgb(117, 245, 66).vitara-chart-background{  fill: rgb(117, 245, 66);  background-color: rgb(117, 245, 66)}Plot Area BackgroundApplied plot area background color to be #f5ad42.vitara-plot-background{    fill: #f5ad42;    background-color: #f5ad42}Axes Labels and Data LabelsApplied the ChartArea background color to be rgb(117, 245, 66) The PlotArea background color to be #f5ad42 Both Category and Value axes labels font-size to be 15px, color fill to be  red  , font-family to be Impact and font-style to be italicFor datalabels, the font-size to be 25px, color fill to be green    and font-family to be Courier New .vitara-chart-background{    fill: rgb(117, 245, 66);    background-color: rgb(117, 245, 66)}.vitara-plot-background{    fill: #f5ad42;    background-color: #f5ad42}.vitara-category-axis, .vitara-value-axis {    font-size: 15px;    fill: red;    font-family: Impact;    font-style: italic;}.vitara-datalabel{    font-size: 25px;    color: green;    font-family: 'Courier New';}TooltipApplied the background color to be aqua  , font family to be Comic Sans MS, Comic Sans, cursive and font size to be 35px.vitara-tooltip{    font-family: \"Comic Sans MS, Comic Sans\", cursive;    font-size: 35px;    background-color: aqua;}Category Axis with title style different from the label styleFor labels, thecolorfill was rgb(197, 66, 245), the font family was Impact, the text decoration was underline, and the font size was 18px.Thecolorfill for the title was #f56c42, the font family was Helvetica, the text decoration was underline, the font size was 25px, and the font style was italic..vitara-category-axis{    fill: rgb(197, 66, 245);    text-decoration: underline;    font-family: Impact;    font-size: 18px}.vitara-category-axis .vitara-axis-title{fill: #f56c42;text-decoration: underline;font-style: italic;font-family: Helvetica;font-size: 25px}</p>Border around bars/columns with border stylingApplied border to the column, stroke-width to be 2, stroke to be red    and stroke-dasharray to be 5,5.vitara-point{    stroke-width: 2;    stroke: red !important;    stroke-dasharray: 5,5;}Line Chart with different line style setApplied stroke-width to be 2 and the stroke-dasharray to be 4,5,2.vitara-line-display{    stroke-width: 2;    stroke-dasharray: 4,5,2;}Legend StylingApplied font-size to be 20px, the font-family to be Impact and fill to be red .vitara-legend-text{    fill: red;    font-family: Impact;    font-size: 20px;}Customising MarkersApplied font-size to be 14px, fill to be teal , stroke to be red , stroke-width to be 2.vitara-marker{fill:teal;font-size: 14px;stroke:red;stroke-width: 2;}Customising Grid linesApplied stroke to be black , opacity to be 0.2, stroke-dasharray to be 6,6.vitara-grid-line{    stroke: black;    opacity: 0.2;    stroke-dasharray: 6,6;}Customising a property specific to one or more chartsApplied fill to be palegreen  for Pie chart background color.VitaraHCPieChart .vitara-chart-background{fill: palegreen;}", "url": "https://docs.vitaracharts.com/customization/customCSSExamples.html"}, {"title": "Custom Color Palette", "body": "These features are supported in the release 4.2 (or newer)Custom Color PaletteUsers can create customcolorpalettes for Vitara charts. VitaraCharts comes with three customcolorpalettes by default: Corporate1, Corporate2 and Corporate3.In any of the Vitara chart, go to - edit \u2192 appearance \u2192 colorpalette.You may see these threecolorpalettes if you expand thecolorpalette tab. We can change thecolorsin existingcolorpalettes and create new ones.Steps to create and deploy a custom color paletteStep 1:Open the file named global.txt in the following path,Tomcat 8.0\\webapps\\MicroStrategy\\plugins\\VitaraCharts\\customIn this file, you can see the three properties called palette.Corporate1, palette.Corporate2 and palette.Corporate3. These are the sample custom palettes' declarations. Please referthe below screenshot of the 'global.txt' file.Step 2:Create a palette. Colornames, hex values, and RGB values are all validcolorvalues. As an example,palette.Vitara=red,green,blue,#12ffd4,rgb(123,215,168)Step 3:There is a palette.list property. This property contains all of the custom palettes (separated by commas) that must be reflected in the charts.Add the name of the custom palette that you want to see in the chart's list ofcolorpalettes.As an example,palette.list=Corporate1,Corporate2,Corporate3,VitaraStep 4:To see the color palette applied on the chart,For example to select the palette named Vitara,Click- Edit \u2192 Appearance \u2192 Color Palette \u2192 VitaraBelow is the screenshot of an existing custom palette Corporate1 in the chart.Steps to set a custom palette as the default paletteStep 1:There is a key in global.txt named palette.defaultPalette. So, you need to specify which custom palette defined in the global.txt should be the default palette for all the charts.For example,palette.defaultPalette=Corporate3Note:Palette will be shown as Misconfigured in the list of color palettes, on failed to parse user-defined palette from global.txt.For example,    Vitara {Misconfigured} If the default palette set in the global.txt is misconfigured, the color palette is defaulted to the chart's default palette.Users can define any number of colors in a given palette.After adding any new color, refresh the dossier/document to reflect the new color in Vitara charts.You can disable any of these custom color palettes, add # at the starting of the palette definition.You have to clear your the browser's cache to reflect this change into any of the Vitara charts.", "url": "https://docs.vitaracharts.com/customization/customColorPalette.html"}, {"title": "Custom Fonts", "body": "These features are supported in the release 4.2 (or newer)Custom fonts in Vitara ChartsVitara Charts can display text, such as axes labels, data labels, or tooltips, in the text font styles specified by the customer. The processes for deploying custom fonts in Vitara charts are outlined below.Step 1:Copy the font file into the following path:\\tomcat\\webapps\\MicroStrategy\\plugins\\VitaraCharts\\style\\v430559\\fontStep 2:Open customStyles.css file, which will be in the following pathplugins\\VitaraCharts\\customStep 3:Uncomment the @font-face container by deleting the text /** (in first line) and the text **/ (in the line number seven)Step 4:Delete the entire text in the second line: Uncomment to introduce new font-family and make it available.Step 5:Replace font-family with the name of the font you want to add. If your font name contains spaces, use quotation marks at the beginning and end of the name. For instance, Frutiger 45 Light.Step 6:In src:url line copy the path of the folder in which we copied the font file.In the below example Hokjesgeest font is deployed.@font-face {            font-family: Hokjesgeest;            src: url(../style/v430559/font/Hokjesgeest.ttf);           }Another example which has spaces in the font name:@font-face {            font-family: \"Frutiger 45 Light\";            src: url(\"../style/v430559/font/Frutiger 45 Light.ttf\");           }Step 7:If you want to add multiple custom fonts, then define font family for each custom font.@font-face {            font-family: fontello;            src: url(../style/v430559/font/fontello.ttf);           }Step 8:List all the custom fonts names in the font vitara-chart-container..vitara .vitara-chart-container{font-family:Hokjesgeest, fontello, \"Frutiger 45 Light\", Arial, Helvetica,Verdana, sans-serif !important;}Below is the screenshot of the updated customStyle.css file.Steps to show the custom fonts in the font-family dropdowns in property editor and set a particular font as default font.Step 1:Open the file named global.txt in the following path,Tomcat 8.0\\webapps\\MicroStrategy\\plugins\\VitaraCharts\\customIn this file, you can find fields named font.customFonts and font.defaultFontStep 2:Include all the custom fonts specified in the font.customFonts key, each one separated by a comma (,).For example,font.customFonts=OpenSans, Hokjesgeest, Frutiger 45 LightStep 3 (Custom font by default across all charts):To set a font as default font for all charts, set the font.defaultFont key.For example,font.defaultFont=Hokjesgeestorfont.defaultFont=Frutiger 45 LightRefresh your web browser and open Vitara Charts. Below is the screenshot of the custom font in the Vitara chart.", "url": "https://docs.vitaracharts.com/customization/customFonts.html"}, {"title": "Condensed Metric Format", "body": "Metric suffixes used to shorten high numbers in axis labels and data labelsVitara charts willminimizethe number in axis and data labels. The shortened metric suffixes can be changed to meet the needs of the user.This can be accomplished by including the following code in the 'global.txt' file. The 'global.txt' file will be found in the Vitara charts plugin folder. Vitara charts \u2192 Custom folder \u2192 global.txt.#Metric suffixes used to shorten high numbers in axis labels.#empty-value, space, null is discarded.shortFormatSymbols=k, M, B, T, P, EIn the preceding code, 'k' represents the suffix for 1000, M represents the suffix for 1000,000, B represents the suffix for 1,000,000,000, and so on. We can edit the suffix character in Vitara Charts to suit our needs.For example, the value 1, 000, 000, 000is automatically shortened as 1B. If we want to alter the suffix 'B' to another character, like 'G,' we must replace 'B' with 'G' in the above code.shortFormatSymbols=k, M, G, T, P, E Save the 'global.txt' file and reopen your document. The below screenshot shows the new suffix 'G'.Note: If you still see the older suffix after reloading the dashboard, clear your browser's cache and reload the dashboard.", "url": "https://docs.vitaracharts.com/customization/customMetricSuffix.html"}, {"title": "Disable Edit button", "body": "Hide 'Edit' buttonUsers can modify Vitara Charts by using the properties box that appears when we click the 'Edit' button. Vitara charts will display this 'Edit' option when the user hovers the cursor over any of the charts. By deactivating the 'Edit' option, we may prevent end users from making changes after the dashboard designer has completed his or her work.VI Dashboards or DossiersWhen the VI Dashboard/Dossier is run in Presentation Mode, the Vitara Charts do not display the 'Edit' button.Report Services DocumentsIn MicroStrategy, the concepts of User Privileges and File Permissions are used to implement security at various levels of users. Vitaracharts can be configured using the security model so that only developers or document designers, not end users, can change the Vitara charts. Depending on the privileges or file permissions that a user has in MicroStrategy, we can allow or limit a user from editing or modifying Vitara charts.Disable edit button using User Privileges:The privilege and permission settings in Vitara Charts are configured in the 'global.txt' file, which is located in the Vitara Charts installation folder. In general, it will take the following path:Tomcat 8.0\\webapps\\MicroStrategy\\plugins\\VitaraCharts\\custom.In the 'global.txt' file, the code #checkPrivilegeForPropertiesEditor=125 will handle user privileges. In this line, we must specify the DSSXML Privilege value of the privilege on which we want to impose a security requirement. The DSSXML Privilege value of 'Web Document Design' is 125 by default. Uncomment this line by removing the '#' to establish the criteria 'Web Document Design' using user privilege. Only users with the 'Web Document Design' privilege will now be able to edit all Vitara charts. You can also use additional privileges to set this requirement. The DSSXML permission value for the 'Web Print Mode' permission, for example, is 27. In the privilege settings line, enter these values.checkPrivilegeForPropertiesEditor=27 The users with this privilege enabled are only able to edit or modify Vitaracharts.Disable edit button using File Permissions:Vitara Charts will inherit a user's file permissions on a specific report services document and display the 'Edit' button if they match the permissions provided in the global.txt file. The following code will deal with setting security conditions applying file permissions in the 'global.txt' file.#accessControlLevels=read/writeThis line will be commented by default. Remove the '#' character to uncomment this line. If you only want people with 'Write' permission on a certain document to be able to change Vitara charts, adjust the code as follows.accessControlLevels=writeNow only the users who have to write permission on that particular report services document will get the 'Edit' button in Vitara Charts.", "url": "https://docs.vitaracharts.com/customization/disableEditButton.html"}, {"title": "Localization", "body": "These features are supported in the release 4.2 (or newer)How to add support for a new languageVitaraCharts editors are accessible in English, German, French, and Spanish out of the box. It is possible to add support for new local languages on your own. The steps are as follows:Create a file MessageBundle_<languagecode>_<regioncode>.txt in directory /VitaraCharts/custom/Example: For fr-fr as user language, file name should be: MessageBundle_fr_fr.txt Copy the content from file VitaraCharts/custom/MessageBundle_en_us.txt in newly created file (MessageBundle_<languagecode>_<regioncode>.txt)Add the respective translation for English string separated by = operatorFormat: \\<English_String\\>=\\<Translated_String\\>Example: Cell=Zelle Preference Order for how lanugage resources are loadedLanguage with regional Code  (MessageBundle_fr_fr.txt )Language Only (MessageBundle_fr.txt )Default (MessageBundle_en_us.txt)NOTE : If the translation for some keys are missing in the file then those keys will be displayed in English Language in the Property Editor", "url": "https://docs.vitaracharts.com/customization/localization.html"}]